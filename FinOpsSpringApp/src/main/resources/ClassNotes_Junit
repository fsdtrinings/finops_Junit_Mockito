

Stage - 1
Service :- Write test for all Service layer class

Stage - 2A
Controller :-
    initate the application context 
     
Stage - 2B
@testData
   - Create a temporary database (H2)
   
   
Tools & API  
   1) Junit - API for testing 
   2) Mocking API - [Mockito , TestNG, ....]
   +
   3) Jacoco : Code coverage 
   4) jacoco is integrated with sonarQube
   
// ----------------------------------------------------------------------------

TDD approach 

//------ 1) Junit & 2) Mockito
//       3) Controller using Mockito 
//       4) Mock Repository using H2 database  

// -----------------------------------------------------------------------


@ExtendsWith(.....)

@Mock 
@test 
@InjectMock 
@Disable 
@Parametertest
@description

// --------

Step 1: Added dependency in Pom.XML [Jacoco]
              Add plugins in POm.XML , related to Jacoco(for index.html)
              add plugin for sonar 
              
Step 2: create Junit test class

Step 3: mvn clean install test verify
         verify (optional) initiates the jacoco things

//---------------------------------------------------------------------------------------


@mock 

@Injectmock

@Service
class EmployeeServiceImpl
{

        @Autowire
        EmployeeRepository empRepo;
 
        // some code to implement business objectives
        public String doThings()
        {
              empRepo.save(....);
        }
}


@ExtendsWith(...) // appply mockito framework in our class
class EmployeeServiceImplTest
{

	@InjectMock
	EmployeeServiceImpl service;
	  // Rule , use Injecct mock over the class under test
	// tells the Junit that inject the mock object into it
	
	@Mock
	EmployeeRepository empRepo;// Fake object , Object behaviour 
	 // which we want to Simulate 
	// 1) use @Mock over Dependency


	@test or @parameterzidTest
	public void doThingsTest()
	{
	
		// 1. Sample Input & Sample Output
		

		// 2. configure the test simulator / mockito Simulator [based on mockito framework]
		
		Mockito.when(Repository.xyz()).thenreturn(expectedReturns)
		
		// -------------------------------------------------------------------------------------
		// 3.do testing using actual method
		   service.doThings();
	
	// ---------------------------------------------------------------------------------------------------
		//4. call assert statement
			// assert.xyz() // assertEquals() , assertNotNull() , asserttThrows()
	// ----------------------------------------------------------------------------------		
	   //5. call Mockito.verify() statements
	              // used to deep check the behaviour 
	              // for exp : delete method should not be called [ Mockito.never()]
	              [mockito.never()]
	}

}

// never 
// atleast(n)
// atMost(n)
// times(n)




















